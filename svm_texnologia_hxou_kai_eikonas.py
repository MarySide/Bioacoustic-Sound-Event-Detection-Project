# -*- coding: utf-8 -*-
"""SVM_Texnologia_Hxou_kai_Eikonas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HSn901l7a7yokYJbuEWt25V29UI_WZDt
"""

from google.colab import drive
drive.mount('/content/gdrive')

import scipy.io
import pandas as pd
import numpy as np
import sklearn
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report

# Load data from csv file
X =  pd.read_csv('/content/gdrive/MyDrive/FEATURES.csv')

X = X.to_numpy()
Y = X[:,21]
X = X[:, :21]

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=28)

scale_gamma = 1/(21 * X.var())
print('gamma if set to scale is:')
print(scale_gamma)

# SVM
print('fitting...')
clf = SVC(C=10.0, gamma=0.00001, kernel='rbf') 
clf.fit(X_train, y_train)

#print(SVC.get_params)
acc = clf.score(X_test, y_test)
print(acc)
print("acc = %0.4f" % acc)


##############################################################################
# Generate confusion matrix
from sklearn import svm
from sklearn.metrics import plot_confusion_matrix
from mlxtend.plotting import plot_decision_regions
import matplotlib.pyplot as plt
matrix = plot_confusion_matrix(clf, X_test, y_test, cmap=plt.cm.Blues, normalize='true')
plt.title('Confusion matrix for the animal classifier')
plt.show(matrix)
plt.show()

#######################################################################
# Grid search
from sklearn.model_selection import GridSearchCV
 
# defining parameter range
param_grid = {'C': [0.1, 1, 10, 20, 30, 40, 50, 60, 100, 1000],
              'gamma': [1, 0.1, 0.01, 0.001, 0.0001, 0.00001],
              'kernel': ['rbf']}
 
grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)
 
# fitting the model for grid search
grid.fit(X_train, y_train)

# print best parameter after tuning
print(grid.best_params_)
 
# print how our model looks after hyper-parameter tuning
print(grid.best_estimator_)

grid_predictions = grid.predict(X_test)
 
# print classification report
print(classification_report(y_test, grid_predictions))